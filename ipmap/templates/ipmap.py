#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
import __builtin__
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import fetch_alert

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.1'
__CHEETAH_versionTuple__ = (2, 4, 1, 'final', 0)
__CHEETAH_genTime__ = 1470101031.2270451
__CHEETAH_genTimestamp__ = 'Tue Aug  2 03:23:51 2016'
__CHEETAH_src__ = 'ipmap/templates/ipmap.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Aug  2 02:09:42 2016'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ipmap(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ipmap, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _orig_filter_49230541 = _filter
        filterName = u'CleanOutput'
        if self._CHEETAH__filters.has_key("CleanOutput"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        write(u'''


\t<link rel="stylesheet" type="text/css" href="ipmap/css/displayMap.css">
\t<link rel="stylesheet" href="ipmap/js/jquery-jvectormap.css" type="text/css" media="screen"/>


''')
        alert_list = []
        country_list = []
        country_name_list = []
        alert_list = VFN(VFFSL(SL,"fetch_alert",True),"query_alert",False)(VFFSL(SL,"alert_list",True))
        country_list = VFN(VFFSL(SL,"fetch_alert",True),"country_list",False)(VFFSL(SL,"alert_list",True))
        country_name_list = VFN(VFFSL(SL,"fetch_alert",True),"country_name_list",False)(VFFSL(SL,"alert_list",True))
        i = VFFSL(SL,"len",False)(VFFSL(SL,"alert_list",True))
        m = VFFSL(SL,"len",False)(VFFSL(SL,"country_list",True))
        n = 0
        j = 0
        write(u'''
     <div id = "marker_list" style = "display : none;">   
''')
        while VFFSL(SL,"j",True) < VFFSL(SL,"i",True): # generated from line 22, col 9
            alert_list[j][1] = VFN(VFFSL(SL,"fetch_alert",True),"alert_type_list",False)(VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][1])
            if VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][3]: # generated from line 24, col 4
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][3] # u'$alert_list[$j][3]' on line 25, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][3]')) # from line 25, col 1.
                write(u''', ''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][4] # u'$alert_list[$j][4]' on line 25, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][4]')) # from line 25, col 21.
                write(u'''?''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][1] # u'$alert_list[$j][1]' on line 25, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][1]')) # from line 25, col 40.
                write(u'''?''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][7] # u'$alert_list[$j][7]' on line 25, col 59
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][7]')) # from line 25, col 59.
                write(u'''?''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][0] # u'$alert_list[$j][0]' on line 25, col 78
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][0]')) # from line 25, col 78.
                write(u'''!
''')
            j = VFFSL(SL,"j",True) + 1
        write(u'''     </div>

''')
        j = 0
        write(u'''
     <div id = "country_list" style = "display : none;">   
''')
        _v = VFFSL(SL,"country_list",True) # u'$country_list' on line 34, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$country_list')) # from line 34, col 1.
        write(u'''
     </div>
   

<div class = "row">
\t     <div class = "col-md-8">
\t     \t  <fieldset>
\t\t\t<div id="map" class = "to_reload" style="width: 825px; height: 550px"></div>
\t\t  </fieldset>

\t     </div>

\t     <div class = "col-md-4">
\t     \t  <div class ="row">
\t\t       <div class = "col-md-4 col-tri">
\t\t       \t    <button id="All" class = "tri">All</button>
''')
        while VFFSL(SL,"j",True) < VFFSL(SL,"m",True): # generated from line 50, col 8
            write(u'''\t\t\t    <button id="''')
            _v = VFFSL(SL,"country_list",True)[VFFSL(SL,"j",True)] # u'$country_list[$j]' on line 51, col 20
            if _v is not None: write(_filter(_v, rawExpr=u'$country_list[$j]')) # from line 51, col 20.
            write(u'''" class = "tri">''')
            _v = VFFSL(SL,"country_name_list",True)[VFFSL(SL,"j",True)] # u'$country_name_list[$j]' on line 51, col 53
            if _v is not None: write(_filter(_v, rawExpr=u'$country_name_list[$j]')) # from line 51, col 53.
            write(u'''</button>
''')
            j = VFFSL(SL,"j",True) + 1
        write(u'''\t\t       </div>
''')
        j = 0
        write(u'''\t\t       <div class = "col-md-8">
\t\t       \t    <fieldset class = "liste_ip">
''')
        while VFFSL(SL,"j",True) < VFFSL(SL,"i",True): # generated from line 58, col 15
            if VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][3]: # generated from line 59, col 11
                write(u'''\t\t\t\t      <div id = "''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][0] # u'$alert_list[$j][0]' on line 60, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][0]')) # from line 60, col 22.
                write(u'''" class = "alert_data ''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][2] # u'$alert_list[$j][2]' on line 60, col 62
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][2]')) # from line 60, col 62.
                write(u''' ''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][6] # u'$alert_list[$j][6]' on line 60, col 81
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][6]')) # from line 60, col 81.
                write(u'''"> 
\t\t\t\t      \t   ''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][1] # u'$alert_list[$j][1]' on line 61, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][1]')) # from line 61, col 15.
                write(u'''</br>
\t\t\t\t      \t   Source : ''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][0] # u'$alert_list[$j][0]' on line 62, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][0]')) # from line 62, col 24.
                write(u'''</br>
\t\t\t\t      \t   Location : ''')
                _v = VFFSL(SL,"alert_list",True)[VFFSL(SL,"j",True)][5] # u'$alert_list[$j][5]' on line 63, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$alert_list[$j][5]')) # from line 63, col 26.
                write(u'''
\t\t\t\t      </div>
''')
            j = VFFSL(SL,"j",True) + 1
        write(u'''\t\t\t   </fieldset>
\t\t       </div>
\t\t   </div>
\t       </div>
\t   </div>

<script type="text/javascript">
     \t     $LAB
\t     .script("ipmap/map_js/jquery-jvectormap.js")
  \t     .script("ipmap/map_js/lib/jquery-mousewheel.js")
  \t     .script("ipmap/map_js/src/jvectormap.js")
  \t     .script("ipmap/map_js/src/abstract-element.js")
  \t     .script("ipmap/map_js/src/abstract-canvas-element.js")
  \t     .script("ipmap/map_js/src/abstract-shape-element.js")
  \t     .script("ipmap/map_js/src/svg-element.js")
  \t     .script("ipmap/map_js/src/svg-group-element.js")
  \t     .script("ipmap/map_js/src/svg-canvas-element.js")
  \t     .script("ipmap/map_js/src/svg-shape-element.js")
  \t     .script("ipmap/map_js/src/svg-path-element.js")
  \t     .script("ipmap/map_js/src/svg-circle-element.js")
  \t     .script("ipmap/map_js/src/svg-image-element.js")
  \t     .script("ipmap/map_js/src/svg-text-element.js")
  \t     .script("ipmap/map_js/src/vml-element.js")
  \t     .script("ipmap/map_js/src/vml-group-element.js")
  \t     .script("ipmap/map_js/src/vml-canvas-element.js")
  \t     .script("ipmap/map_js/src/vml-shape-element.js")
  \t     .script("ipmap/map_js/src/vml-path-element.js")
  \t     .script("ipmap/map_js/src/vml-circle-element.js")
  \t     .script("ipmap/map_js/src/vml-image-element.js")
  \t     .script("ipmap/map_js/src/map-object.js")
  \t     .script("ipmap/map_js/src/region.js")
  \t     .script("ipmap/map_js/src/marker.js")
  \t     .script("ipmap/map_js/src/vector-canvas.js")
  \t     .script("ipmap/map_js/src/simple-scale.js")
  \t     .script("ipmap/map_js/src/ordinal-scale.js")
  \t     .script("ipmap/map_js/src/numeric-scale.js")
  \t     .script("ipmap/map_js/src/color-scale.js")
  \t     .script("ipmap/map_js/src/legend.js")
  \t     .script("ipmap/map_js/src/data-series.js")
  \t     .script("ipmap/map_js/src/proj.js")
  \t     .script("ipmap/map_js/src/map.js")  \t
\t     .script("ipmap/map_js/tests/assets/jquery-jvectormap-world-mill-en.js")\t
  \t     .script("ipmap/js/affichage_map.js")
  \t     .script("ipmap/js/alert_animation.js").wait(function(){
\t    \t\t\t\t\t\t    
           jQuery(document).ready(function(){
\t   create_ipmap();
           create_sortbuttons();
\t\t});
\t   });
</script>



''')
        _filter = self._CHEETAH__currentFilter = _orig_filter_49230541
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_ipmap= 'respond'

## END CLASS DEFINITION

if not hasattr(ipmap, '_initCheetahAttributes'):
    templateAPIClass = getattr(ipmap, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ipmap)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ipmap()).run()


